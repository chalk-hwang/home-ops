version: '3'
vars:
  CYAN: tput setaf 6
  RED: tput setaf 1
  YELLOW: tput setaf 3
  GREEN: tput setaf 2
  BLUE: tput setaf 1
  PURPLE: tput setaf 5
  BG_B: tput setab 0
  BOLD: tput bold
  RESET: tput sgr0
  CLEAR: tput reset
  INT_REGISTRY: registry.localhost
  PATH_ERROR: is not installed or correctly configured in PATH.
  ARGOCD_VERSION: 2.9.6

silent: true

tasks:
  secret:
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url | sed -e 's/:/\//g'| sed -e 's/ssh\/\/\///g'| sed -e 's/git@/https:\/\//g' | sed 's/.git$//'
    cmds:
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: vault-configuration
        namespace: argocd
      stringData:
        AVP_TYPE: "$ARGOCD_AVP_TYPE"
        OP_CONNECT_TOKEN: "$(op read op://Private-Homelab/Production_AccessToken_ArgoVaultPlugin/credential)"
        OP_CONNECT_HOST: "$ARGOCD_OP_CONNECT_HOST"
      type: Opaque
      EOF
    ignore_error: true

  repo:
    vars:
      GIT_URI:
        sh: git config --get remote.origin.url | sed -e 's/:/\//g'| sed -e 's/ssh\/\/\///g'| sed -e 's/git@/https:\/\//g' | sed 's/.git$//'
    cmds:
    - rm config/repo.yaml
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: main-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: https://github.com/chalk-hwang/home-ops.git
        password: "$(op read "op://Homelab/github/PW")"
        username: "$(op read "op://Homelab/github/ID")"
      EOF
    - |
      kubectl apply -f - << EOF
      apiVersion: v1
      kind: Secret
      metadata:
        name: private-repository
        namespace: argocd
        labels:
          argocd.argoproj.io/secret-type: repository
      stringData:
        type: git
        url: https://github.com/chalk-hwang/home-ops-private.git
        password: "$(op read "op://Homelab/github/PW")"
        username: "$(op read "op://Homelab/github/ID")"
      EOF
    ignore_error: true



  install:
    desc: Installs ArgoCD resources manually on the local cluster
    dir: argocd
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - kubectl create namespace argocd
    - kustomize build | kubectl apply -f -
    - sleep 10
    - kustomize build | kubectl apply -f -
    - kubectl wait deploy/argocd-server -n argocd --for condition=available --timeout=600s
    - echo ""
    ignore_error: true

  build:
    cmds:
    - task: build:sidecar
    - task: push:sidecar

  

  rm:
    dir: argocd
    preconditions:
    - sh: 'which kustomize'
      msg: 'kustomize {{.PATH_ERROR}}'
    cmds:
    - kustomize build | kubectl delete -f -
    ignore_error: true

  bridge: kubectl port-forward -n argocd svc/argocd-server 8832:80

  password:
    cmds:
    - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
    ignore_error: true

  passworargtoken:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - |
      PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
      argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
    - argocd account generate-token --account image-updater --id image-updater > config/argo-token.yaml

  password:update:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    - sh: 'which kubectl'
      msg: 'kubectl {{.PATH_ERROR}}'
    cmds:
    - |
      PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo) \
      argocd login --insecure --username admin --password ${PASSWORD} $ARGOCD_URI
    - argocd account update-password

  login:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    cmds:
    - argocd login argo.chalk-ho.me --username $(op read "op://Private-Homelab/ArgoCD/username") --password $(op read "op://Private-Homelab/ArgoCD/password")

  refresh:
    preconditions:
    - sh: 'which argocd'
      msg: 'argocd {{.PATH_ERROR}}'
    cmds:
    - argocd app list -o name | xargs -I{} argocd app get --hard-refresh {}

  reset:
    cmds:
    - task: login
    - task: refresh

  default:
    cmds:
      - task: repo
      - task: secret
      - task: install
