---
- name: Prepare System
  hosts: kubernetes
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
    - name: Populate service facts
      ansible.builtin.service_facts:

    - name: Set facts
      ansible.builtin.set_fact:
        os_release: "{{ ansible_distribution_release | lower }}"
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "Asia/Seoul"
    - name: Packages
      block:
        - name: Packages | Add backports repo
          ansible.builtin.apt_repository:
            repo: "deb http://deb.debian.org/debian {{ os_release }}-backports main"
            state: present
            update_cache: true
            filename: "backports.list"

        - name: Packages | Install Cockpit
          ansible.builtin.apt:
            name:
              - cockpit
              - cockpit-storaged
              - cockpit-networkmanager
              - cockpit-packagekit
              - cockpit-machines
              - cockpit-podman
            default_release: "{{ os_release }}-backports"
            install_recommends: false

        - name: Packages | Enable Cockpit service
          ansible.builtin.service:
            name: cockpit
            enabled: true

        - name: Packages | Install
          ansible.builtin.apt:
            name:
              - make
              - npm
              - apt-transport-https
              - ca-certificates
              - conntrack
              - curl
              - dirmngr
              - gdisk
              - gnupg
              - hdparm
              - htop
              - iptables
              - iputils-ping
              - ipvsadm
              - libseccomp2
              - lm-sensors
              - lsb-release
              - neofetch
              - net-tools
              - nfs-common
              - nvme-cli
              - open-iscsi
              - parted
              - psmisc
              - python3
              - python3-apt
              - python3-kubernetes
              - python3-yaml
              - smartmontools
              - socat
              - software-properties-common
              - unzip
              - util-linux
              - wget
              - multipath-tools
              - gpg
            install_recommends: false

        - name: Packages | Get trivy repo key
          ansible.builtin.shell:
            cmd: set -o pipefail | curl https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg -o /usr/share/keyrings/trivy.pgp --dearmor
            creates: "/usr/share/keyrings/trivy.pgp"

        - name: Packages | Add trivy repo
          ansible.builtin.apt_repository:
            repo: "deb [signed-by=/usr/share/keyrings/trivy.pgp] https://aquasecurity.github.io/trivy-repo/deb {{ os_release }} main"
            state: present
            update_cache: true
            filename: "trivy.list"

        - name: Packages | Install trivy
          ansible.builtin.apt:
            name: trivy
            install_recommends: false

    - name: Fish
      block:
        - name: Fish | Install fish
          ansible.builtin.dnf:
            name: fish
        - name: Fish | Set as default shell
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            shell: /usr/bin/fish
        - name: Fish | Create configuration directory
          ansible.builtin.file:
            path: "{{ '/home/' + ansible_user if ansible_user != 'root' else '/root' }}/.config/fish/functions"
            state: directory
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            recurse: true
        - name: Fish | Create neofetch greeting
          ansible.builtin.copy:
            dest: "{{ '/home/' + ansible_user if ansible_user != 'root' else '/root' }}/.config/fish/functions/fish_greeting.fish"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: "0755"
            content: neofetch --config none
        - name: Fish | Create kubectl shorthand
          ansible.builtin.copy:
            dest: "{{ '/home/' + ansible_user if ansible_user != 'root' else '/root' }}/.config/fish/functions/k.fish"
            owner: "{{ ansible_user }}"
            group: "{{ ansible_user }}"
            mode: "0755"
            content: |
              function k --wraps=kubectl --description 'kubectl shorthand'
                  kubectl $argv
              end

    - name: Network Configuration
      notify: RebootHandler
      block:
        - name: Network Configuration | Set hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Network Configuration | Update hosts
          ansible.builtin.copy:
            content: |
              127.0.0.1 localhost
              127.0.1.1 {{ inventory_hostname }}
              # The following lines are desirable for IPv6 capable hosts
              ::1     localhost ip6-localhost ip6-loopback
              ff02::1 ip6-allnodes
              ff02::2 ip6-allrouters
            dest: /etc/hosts
            mode: preserve
          # https://github.com/onedr0p/cluster-template/discussions/635
        - name: Network Configuration | Remove immutable flag from /etc/resolv.conf
          ansible.builtin.file:
            attributes: -i
            path: /etc/resolv.conf
        - name: Network Configuration | Remove /etc/resolv.conf
          ansible.builtin.file:
            attributes: -i
            path: /etc/resolv.conf
            state: absent
        - name: Network Configuration | Add custom /etc/resolv.conf
          ansible.builtin.copy:
            attributes: +i
            mode: '0644'
            dest: /etc/resolv.conf
            content: |
              search .
              nameserver 1.1.1.1
              nameserver 1.0.0.1

    - name: System Configuration
      notify: RebootHandler
      block:
        - name: System Configuration | Disable apparmor
          when:
            - ansible_distribution == "Ubuntu"
            - ansible_facts.services['apparmor.service'] is defined
          ansible.builtin.systemd:
            name: apparmor
            state: stopped
            masked: true
        - name: System Configuration | Disable swap
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration | Create Kernel modules
          ansible.builtin.copy:
            dest: "/etc/modules-load.d/{{ item }}.conf"
            mode: "0644"
            content: "{{ item }}"
          loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "nbd", "overlay", "rbd", "zfs"]
          register: modules_status
        - name: System Configuration | Reload Kernel modules # noqa: no-changed-when no-handler
          when: modules_status.changed
          ansible.builtin.systemd:
            name: systemd-modules-load
            state: restarted
        - name: System Configuration | Sysctl
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          loop:
            - { key: "fs.inotify.max_queued_events", value: "65536" }
            - { key: "fs.inotify.max_user_watches", value: "524288" }
            - { key: "fs.inotify.max_user_instances", value: "8192" }

  handlers:
    - name: RebootHandler
      ansible.builtin.reboot:
        msg: Rebooting hosts
        reboot_timeout: 3600
