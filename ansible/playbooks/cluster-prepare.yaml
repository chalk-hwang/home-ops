---
- name: Prepare System
  hosts: kubernetes
  become: true
  gather_facts: true
  any_errors_fatal: true
  pre_tasks:
    - name: Pausing for 5 seconds...
      ansible.builtin.pause:
        seconds: 5
    - name: Populate service facts
      ansible.builtin.service_facts:
  tasks:
    - name: Locale
      block:
        - name: Locale | Set timezone
          community.general.timezone:
            name: "Asia/Seoul"
    - name: Packages
      block:
        - name: Packages | Debian
          when: ansible_distribution == "Debian"
          block:
            - name: Packages | Debian | Add repo
              ansible.builtin.apt_repository:
                repo: "deb http://deb.debian.org/debian {{ ansible_distribution_release | lower }}-backports main"
                state: present
                update_cache: true
                filename: "backports.list"
            - name: Packages | Debian | Install
              ansible.builtin.apt:
                name: "cockpit"
                default_release: "{{ ansible_distribution_release | lower }}-backports"
                install_recommends: false
        - name: Packages | Install
          ansible.builtin.apt:
            name: apt-transport-https,ca-certificates,conntrack,curl,dirmngr,gdisk,gnupg,hdparm,htop,
              iptables,iputils-ping,ipvsadm,libseccomp2,lm-sensors,neofetch,net-tools,nfs-common,
              nvme-cli,open-iscsi,parted,psmisc,python3,python3-apt,python3-kubernetes,python3-yaml,
              smartmontools,socat,software-properties-common,unzip,util-linux,zsh
            install_recommends: false


    - name: Shell Configuration
      block:
        - name: Shell Configuration | Set ZSH as default shell
          ansible.builtin.user:
            name: "{{ ansible_user }}"
            shell: /usr/bin/zsh
        - name: Shell Configuration | Run Starship install script
          ansible.builtin.get_url:
            url: "https://starship.rs/install.sh"
            dest: "/tmp/starship_install.sh"
            mode: '0755'
          register: starship_install
          changed_when: starship_install is changed
          failed_when: starship_install is failed
          ignore_errors: yes
          until: starship_install is success
        - name: Shell Configuration | Execute Starship install script
          when: starship_install is changed or starship_install is success
          ansible.builtin.command:
            cmd: "/tmp/starship_install.sh"
            creates: "/usr/local/bin/starship"
        - name: Shell Configuration | Set Starship as default prompt
          ansible.builtin.lineinfile:
            path: "/etc/zsh/zshrc"
            line: eval "$(starship init zsh)"
            create: yes
            mode: '0644'

    - name: Network Configuration
      notify: RebootHandler
      block:
        - name: Network Configuration | Set hostname
          ansible.builtin.hostname:
            name: "{{ inventory_hostname }}"
        - name: Network Configuration | Update hosts
          ansible.builtin.copy:
            content: |
              127.0.0.1 localhost
              # The following lines are desirable for IPv6 capable hosts
              ::1     localhost ip6-localhost ip6-loopback
              ff02::1 ip6-allnodes
              ff02::2 ip6-allrouters
            dest: /etc/hosts
            mode: preserve
          # https://github.com/onedr0p/cluster-template/discussions/635
        - name: Network Configuration | Remove immutable flag from /etc/resolv.conf
          ansible.builtin.file:
            attributes: -i
            path: /etc/resolv.conf
        - name: Network Configuration | Remove /etc/resolv.conf
          ansible.builtin.file:
            attributes: -i
            path: /etc/resolv.conf
            state: absent
        - name: Network Configuration | Add custom /etc/resolv.conf
          ansible.builtin.copy:
            attributes: +i
            mode: '0644'
            dest: /etc/resolv.conf
            content: |
              search .
              nameserver 1.1.1.1
              nameserver 1.0.0.1

    - name: System Configuration
      notify: RebootHandler
      block:
        - name: System Configuration | Disable apparmor
          when:
            - ansible_distribution == "Ubuntu"
            - ansible_facts.services['apparmor.service'] is defined
          ansible.builtin.systemd:
            name: apparmor
            state: stopped
            masked: true
        - name: System Configuration | Disable swap
          ansible.posix.mount:
            name: "{{ item }}"
            fstype: swap
            state: absent
          loop: ["none", "swap"]
        - name: System Configuration | Create Kernel modules
          ansible.builtin.copy:
            dest: "/etc/modules-load.d/{{ item }}.conf"
            mode: "0644"
            content: "{{ item }}"
          loop: ["br_netfilter", "ceph", "ip_vs", "ip_vs_rr", "nbd", "overlay", "rbd"]
          register: modules_status
        - name: System Configuration | Reload Kernel modules # noqa: no-changed-when no-handler
          when: modules_status.changed
          ansible.builtin.systemd:
            name: systemd-modules-load
            state: restarted
        - name: System Configuration | Sysctl
          ansible.posix.sysctl:
            name: "{{ item.key }}"
            value: "{{ item.value }}"
            sysctl_file: /etc/sysctl.d/99-kubernetes.conf
            reload: true
          loop:
            - { key: "fs.inotify.max_queued_events", value: "65536" }
            - { key: "fs.inotify.max_user_watches", value: "524288" }
            - { key: "fs.inotify.max_user_instances", value: "8192" }

  handlers:
    - name: RebootHandler
      ansible.builtin.reboot:
        msg: Rebooting hosts
        reboot_timeout: 3600
